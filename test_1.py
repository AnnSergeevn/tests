import pytest

courses = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python",
           "Frontend-разработчик с нуля"]

mentors = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
         "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
         "Азамат Искаков",
         "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
         "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский",
         "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов",
         "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
         "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
         "Денис Ежков",
         "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин",
         "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]

expected = ['Адилет, Азамат, Александр, Алексей, Алена, Анатолий, Анна, Антон, Вадим, Валерий, Владимир, Денис, Дмитрий, ' \
           'Евгений, Елена, Иван, Илья, Кирилл, Константин, Максим, Михаил, Никита, Николай, Олег, Павел, Ринат, Роман, ' \
           'Сергей, Татьяна, Тимур, Филипп, Эдгар, Юрий', "Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)", "Антон, Евгений, Максим"]

# expected1 = "Александр: 10 раз(а), Евгений: 5 раз(а), Максим: 4 раз(а)"
#
# expected2 = "Антон, Евгений, Максим"

def find_unic_name(mentors):
    # Добавьте в список всех преподавателей со всех курсов
    all_list = []
    for m in mentors:
        all_list.extend(
            m)  # Допишите здесь ваш код, который заполнит all_list. Можете как складывать списки, так и использовать метод extend

    # Сделайте список all_names_list, состоящий только из имён, и заполните его
    all_names_list = []
    for mentor in all_list:
        name = mentor.split()[0]

        all_names_list.append(name)

    # Сделайте так, чтобы остались только уникальные имена (без повторений) - допишите ниже ваш код
    unique_names = set(all_names_list)

    # Теперь необходимо отсортировать имена в алфавитном порядке. Подсказка: используйте sorted() для списка
    # Допишите код ниже
    all_names_sorted = sorted(list(unique_names))
    # Допишите конструкцию вывода результата. Можете использовать string.join()
    # Результат будет в all_names_sorted
    #print(f'Уникальные имена преподавателей: {", ".join(all_names_sorted)}')
    return ", ".join(all_names_sorted)


def find_top_3_name(mentors):

    # Добавьте сюда ваш код из Задачи 1
    # Добавьте в список всех преподавателей со всех курсов
    all_list = []
    for m in mentors:
        all_list.extend(
            m)  # Допишите здесь ваш код, который заполнит all_list. Можете как складывать списки, так и использовать метод extend

    # Сделайте список all_names_list, состоящий только из имён, и заполните его
    all_names_list = []
    for mentor in all_list:
        name = mentor.split()[0]

        all_names_list.append(name)

    # Сделайте так, чтобы остались только уникальные имена (без повторений) - допишите ниже ваш код
    unique_names = set(all_names_list)

    # Теперь необходимо отсортировать имена в алфавитном порядке. Подсказка: используйте sorted() для списка
    # Допишите код ниже
    all_names_sorted = sorted(list(unique_names))
    # Уникальные имена будут в unique_names
    unique_names = set(all_names_list)

    # Подсчитайте встречаемость каждого имени через list.count()
    popular = []
    for name in unique_names:
        popular.append([name, all_names_list.count(name)])  # Добавьте подсчёт имён

    # Это код для сортировки списка с элементами вида [имя, количество] по убыванию встречаемости
    # Используйте его, как есть, или напишите собственный :)
    popular.sort(key=lambda x: x[1], reverse=True)

    # Получите топ-3 часто встречающихся имён из списка popular
    # Подсказка: возьмите срез списка
    top_3 = popular[0: 3]
    top = [f"{str(i[0])}: {str(i[1])} раз(а)" for i in top_3]
    #print(", ".join(top))
    return ", ".join(top)


def compare_teachers_list(mentors, courses):
    # Делаем список списков имён
    mentors_names = []
    for m in mentors:
        course_names = []
        for name in m:
            course_names.append(name.split()[0])  # Допишите код здесь
        # Допишите ниже код, который добавляет списки имён в общий список mentors_names:
        mentors_names.append(sorted(course_names))

    # Храните здесь пары курсов, в которых есть совпавшие имена
    pairs = []
    # # Попарное сравнение "наборов" преподавателей на курсах. Каждую новую пару запоминаем для исключения повторов.
    for id1 in range(len(mentors_names)):
        for id2 in range(len(mentors_names)):
            # проверьте, что вы не сравниваете список сам с собой:
            if id1 == id2:
                continue
            # допишите ниже код для сравнения двух "наборов" преподавателей. подсказка: используйте множества
            intersection_set = set(mentors_names[id1]) & set(mentors_names[id2])
            if len(intersection_set) > 0:  # допишите проверку, что результат не пустой, имена есть
                # допишите ниже код, который проверяет, что эта пара еще не встречалась
                pair = {courses[id1], courses[id2]}
                # и если pair еще не встречалась, то выведите на экран два курса и список преподавателей, которые есть на обоих курсах
                if pair not in pairs:
                    pairs.append(pair)
                    # отсортируйте имена по алфавиту. подсказка: используйте sorted() для списка
                    all_names_sorted = sorted(intersection_set)
                    # допишите конструкцию вывода результата. можете использовать string.join()
                    # print(
                    #     f"На курсах '{courses[id1]}' и '{courses[id2]}' преподают: {', '.join(str(i) for i in all_names_sorted)}")
                    return ', '.join(str(i) for i in all_names_sorted)


func = [find_unic_name(mentors), find_top_3_name(mentors), compare_teachers_list(mentors, courses)]
for i in range(3):
    @pytest.mark.parametrize(
        ('func', 'expected'),[(func[i], expected[i])]
    )
    def test_find_unic_name(func, expected):
        res = func[i]
        assert res == expected[i]


if __name__ == '__main__':
    print(find_unic_name(mentors))
    print(find_top_3_name(mentors))
    print(compare_teachers_list(mentors, courses))

